Liga Colegiada de Programación Colombiana CCPL 2013 Concurso 1 -- 23 de febrero Problemas Este conjunto contiene 10 problemas; páginas 1 a 15. (Tomado del Concurso Regional de Programación del Sudeste de EE. UU. de la ACM ICPC 2012 -- División II.) Página A - Tienda de dulces . ... . . . 2 C - Hazlo mal, hazlo bien . ... . ... . ... . . . . . . . . . . 15 0

Liga Colegial Colombiana de Programación - CCPL 2013 1 A - Tienda de dulces Nombre del archivo fuente: store.c, store.cpp o store.java Estás caminando con un amigo, cuando pasas por una tienda de dulces. Haces un comentario sobre lo poco saludables que son sus productos. Tu amigo lanza un desafío interesante: ¿quién puede ser el más insalubre? Ambos entrarán a la tienda con la misma cantidad de dinero. ¡Quien compre dulces con la mayor cantidad de calorías totales gana! Como eres un científico informático inteligente y tienes acceso al inventario de la tienda de dulces, decides no correr ningún riesgo. Escribirás un programa para determinar la mayor cantidad de calorías que puedes comprar. El inventario te dice el precio y las calorías de cada artículo. También te dice que hay tanto en stock que puedes comprar tantos dulces de cualquier tipo como quieras. Solo puedes comprar piezas enteras de dulces. Entrada Habrá múltiples casos de prueba en la entrada. Cada caso de prueba comenzará con una línea con un entero n (1 ≤ n ≤ 5, 000), y una cantidad de dinero m ($0.01 ≤ m ≤ $100.00), separados por un solo espacio, donde n es la cantidad de diferentes tipos de dulces para la venta, y m es la cantidad de dinero que tiene para gastar. La cantidad monetaria m se expresará en dólares con exactamente dos decimales, y sin ceros a la izquierda a menos que la cantidad sea menor a un dólar. No habrá ningún signo de dólar. Cada una de las siguientes n líneas tendrá un entero c (1 ≤ c ≤ 5, 000) y una cantidad de dinero p ($0.01 ≤ p ≤ $100.00), separados por un solo espacio, donde c es la cantidad de calorías en una sola pieza de dulce, y p es el precio de una sola pieza de dulce, en dólares y en el mismo formato que m. La entrada terminará con una línea que contiene &#39;00.00&#39;. La entrada debe leerse desde la entrada estándar. Salida Para cada caso de prueba, genere un solo entero, que indique la cantidad máxima de calorías que puede comprar con hasta m dólares. No genere espacios ni separe las respuestas con líneas en blanco. La salida debe escribirse en la salida estándar. Entrada de muestra 2 8.00 700 7.00 199 2.00 3 8.00 700 7.00 299 3.00 499 5.00 0 0.00 Salida de muestra 796 798

Liga Colegial Colombiana de Programación - CCPL 2013 2 B - Detección de Colisiones Nombre del archivo fuente: detect.c, detect.cpp o detect.java Como paso preliminar en el desarrollo de un sistema de vehículo autónomo, su equipo busca probar que un controlador de tráfico central puede hacer sonar una alerta cuando es probable que los automóviles colisionen a menos que se tomen acciones correctivas. El circuito de prueba consta de varias pistas rectas que se cruzan en una variedad de ángulos. A medida que los automóviles pasan por sensores montados en las pistas, se registra su posición y velocidad y se envían al controlador central. El controlador recuerda sus dos conjuntos de lecturas más recientes para cada automóvil. Queremos que el controlador haga sonar la alerta cada vez que dos automóviles, si se comportan como se predijo, pasen &quot;peligrosamente cerca&quot; uno del otro en cualquier momento dentro de los próximos 30 segundos (después de la lectura más reciente del sensor). Para este propósito, considere que los automóviles están peligrosamente cerca si pasan a 18 pies uno del otro. Los automóviles se consideran seguros si su aproximación más cercana está al menos a 20 pies de distancia. Un paso dentro de 18 pies a 20 pies se considera ambiguo. Suponga que • Los autos permanecen en su curso recto • La aceleración (cambio en la velocidad por unidad de tiempo) de cada auto permanece constante durante el tiempo entre observaciones y durante los siguientes 30 segundos, con las dos excepciones que se indican a continuación. – Excepción 1: si el auto está desacelerando, deja de desacelerar si su velocidad llega a cero (los autos no cambian a reversa). – Excepción 2: si el auto está acelerando, deja de acelerar si su velocidad llega a 80 pies por segundo (aproximadamente 55 MPH). Dados los dos conjuntos de lecturas más recientes para cada uno de los dos autos, determine si pasarán a 18 pies uno del otro dentro de los 30 segundos posteriores a la última medición. Entrada Habrá múltiples casos de prueba en la entrada. Cada caso de prueba consta de cuatro observaciones, una observación por línea. Las primeras dos observaciones son para el primer auto, las segundas dos observaciones son para el segundo auto. Cada observación consta de cuatro números de punto flotante t, x, y y s, separados por espacios simples, donde: • t es el tiempo de la observación en segundos (0 ≤ t ≤ 120) • x e y dan la posición del automóvil en el momento de la observación, en pies (−5 000 ≤ x, y ≤ 5 000) • s es la velocidad en pies por segundo (0 ≤ s ≤ 80)

Liga Colegiada de Programación de Colombia - CCPL 2013 3 No habrá conjuntos de datos en los cuales el acercamiento más cercano dentro del intervalo de tiempo indicado caiga en el rango ambiguo de 18 pies a 20 pies. Las dos observaciones para un automóvil dado siempre ocurrirán en momentos distintos, y la primera vez para cada automóvil será antes de la segunda vez para ese automóvil. La entrada se termina con una línea con cuatro números negativos. La entrada debe leerse desde la entrada estándar. Salida Para cada conjunto de datos, imprima una sola línea que consista en 1 si los automóviles se acercarán a 18 pies uno del otro dentro de los 30 segundos posteriores al máximo de los 4 tiempos de entrada, o 0 en caso contrario. Salida sin espacios adicionales y no separe las respuestas con líneas en blanco. La salida debe escribirse en la salida estándar. Entrada de muestra 10 0 0 10 11 7,42 7,42 11 11 41,0 106,0 16 12 56 106 14 0 0 0 50 0,5 21,7 12,5 50,1 0,25 39,0 22,5 50 0,75 60,7 35,0 50,1 -1 -1 -1 -1 Salida de muestra 1 0

Liga Colegiada de Programación Colombiana - CCPL 2013 4 C - Hazlo mal, hazlo bien Nombre del archivo fuente: doit.c, doit.cpp o doit.java En la escuela primaria, los estudiantes aprenden a restar fracciones obteniendo primero un denominador común y luego restando los numeradores. Sin embargo, a veces un estudiante resolverá el problema incorrectamente y aún así llegará a la respuesta correcta. Por ejemplo, para el problema 5 4 − 9 12 uno puede restar los números en el numerador y luego restar los números en el denominador, simplificar y obtener la respuesta. es decir, 5 4 − 9 12 = −4 −8 = 4 8 = 1 2 . Para una fracción dada b/n, su tarea es encontrar todos los valores a y m, donde a ≥ 0 y m &gt; 0, para los cuales a m − b n = a− b m− n . Entrada Habrá varios casos de prueba en la entrada. Cada caso de prueba constará de una sola línea con dos enteros, b y n (1 ≤ b, n ≤ 106) separados por un solo espacio. La entrada terminará con una línea con dos 0. La entrada debe leerse desde la entrada estándar. Salida Para cada caso, imprima todas las fracciones solicitadas en una sola línea, ordenadas de menor a mayor. Para fracciones equivalentes, imprima primero la que tenga el numerador más pequeño. Imprima cada fracción en la forma a/m sin espacios inmediatamente antes o después de /. Imprima un solo espacio entre fracciones. No imprima espacios adicionales y no separe las respuestas con líneas en blanco. La salida debe escribirse en la salida estándar. Entrada de muestra 9 12 12 14 4 12 0 0 Salida de muestra 0/24 5/20 8/16 8/8 5/4 0/28 9/21 9/7 0/24 3/18 3/6

Liga Universitaria Colombiana de Programación - CCPL 2013 5 D - Duelo de filósofos Nombre del archivo fuente: duel.c, duel.cpp o duel.java Después de un triste y extraño incidente que involucró una sala llena de filósofos, varios platos de espagueti y un tenedor de más, la facultad del Departamento de Filosofía de la Universidad ACM ha estado revisando los papeles de un colega recientemente fallecido. Los miembros de la facultad se sorprendieron al encontrar numerosos ensayos inéditos. Creen que los ensayos, recopilados en un volumen, pueden constituir un importante trabajo de erudición que le dará a su departamento una publicidad positiva muy necesaria. Naturalmente, todos los miembros de la facultad comenzaron a competir por el honor (por no hablar de la fama) de servir como editor de la colección. Después de mucho debate, los miembros de la facultad han reducido la lista a dos candidatos. A ambos solicitantes se les pidió que explicaran cómo organizarían los ensayos dentro del libro final. Ambos han señalado que muchos de los ensayos definen terminología y conceptos que se exploran en otros ensayos. Ambos han acordado el principio básico de que un ensayo que utiliza un término debe aparecer después del ensayo que define ese término. Uno de los candidatos ha presentado lo que afirma es la única disposición posible de los ensayos, bajo esas restricciones, y argumenta que se le debe dar el trabajo simplemente porque ya ha hecho esta parte importante del trabajo. El segundo candidato se burla de esta afirmación, insistiendo en que hay muchas disposiciones posibles de los ensayos, y que se necesita un editor de verdadera habilidad (él mismo) para elegir la disposición óptima. Escriba un programa para determinar si es posible cero, uno o más de una disposición de los ensayos. Entrada Habrá múltiples casos de prueba en la entrada. Cada caso de prueba comenzará con una línea con dos números enteros, n (1 ≤ n ≤ 1, 000) y m (1 ≤ m ≤ 500, 000), donde n es el número de ensayos, y m es el número de relaciones entre ensayos causadas por compartir términos. Estarán separados por un solo espacio. En cada una de las siguientes m líneas habrá dos números enteros, d seguido de u (1 ≤ d, u ≤ n, d 6 = u) que indican que algún término está definido en el ensayo d y se usa en el ensayo u. Los números enteros d y u estarán separados por un solo espacio. La entrada terminará con dos 0 en su propia línea. La entrada debe leerse desde la entrada estándar. Salida Para cada caso de prueba, muestre un 0 si no es posible ningún arreglo, un 1 si es posible exactamente un arreglo, o un 2 si son posibles múltiples arreglos (muestre 2 sin importar cuántos arreglos haya). No incluya espacios adicionales ni separe las respuestas con líneas en blanco. La salida debe escribirse en la salida estándar.

Liga Colegial Colombiana de Programación - CCPL 2013 6 Muestra de entrada 5 4 1 5 5 2 3 2 4 3 5 4 3 1 4 2 1 5 5 4 2 2 1 2 2 1 0 0 Muestra de salida 2 1 0

Liga Colombiana de Programación Universitaria - CCPL 2013 7 E - Paint Me Nombre del archivo fuente: paintme.c, paintme.cpp o paintme.java Un contratista está planeando presentar una oferta para pintar el interior de un edificio de apartamentos. Estos apartamentos son para alojamiento de estudiantes, por lo que serán monoambientes de una sola habitación y tendrán paredes y techos de paneles de yeso básicos, sin características arquitectónicas particulares como molduras de techo. Le gustaría encontrar una forma más rápida de estimar cuánta pintura se necesitará para pintar las paredes y los techos para cada trabajo. El plan para estos edificios es pintar las cuatro paredes y el techo de la habitación principal. Los armarios y los baños no se pintarán. Por supuesto, no se necesita pintura para las aberturas de ventanas y puertas. Todas las habitaciones, ventanas y puertas son rectangulares. Todas las habitaciones se pintarán del mismo color. El contratista le proporcionará información sobre las dimensiones de las habitaciones, las ventanas y puertas de cada plano de planta y la cantidad de apartamentos. Su equipo debe escribir un programa que le indique cuántas latas de pintura debe incluir en su oferta. Entrada Habrá varios casos de prueba en la entrada. Cada caso de prueba comienza con una línea con 6 números enteros: n ancho largo alto área m Donde n (1 ≤ n ≤ 100) es el número de apartamentos, ancho (8 ≤ ancho ≤ 100) es el ancho de cada habitación, largo (10 ≤ largo ≤ 100) es el largo de cada habitación, alto (8 ≤ alto ≤ 30) es la altura de cada habitación, área (100 ≤ área ≤ 1, 000) es el área en pies cuadrados que puede cubrir cada lata de pintura, y m (0 ≤ m ≤ 10) es el número de ventanas y puertas. En cada una de las siguientes m líneas habrá dos números enteros, ancho y alto, que describen una puerta o ventana. Ninguna ventana o puerta será más grande que la pared más grande, y tanto el ancho como el alto serán positivos. Todas las medidas lineales se expresarán en pies. La entrada terminará con una línea con seis 0. La entrada debe leerse desde la entrada estándar. Salida Para cada caso de prueba, genere un solo entero en su propia línea, indicando la cantidad de latas de pintura necesarias para pintar todas las paredes y los techos de todos los apartamentos. No genere espacios adicionales y no separe las respuestas con líneas en blanco. La salida debe escribirse en la salida estándar.

Liga Colegial Colombiana de Programación - CCPL 2013 8 Entrada de muestra 50 8 20 8 350 2 6 3 3 3 50 8 20 8 300 3 6 3 5 3 3 3 0 0 0 0 0 0 Salida de muestra 83 95

Liga Colegial Colombiana de Programación - CCPL 2013 9 F - Juegos de Fiesta Nombre del archivo fuente: party.c, party.cpp o party.java Te han invitado a una fiesta. El anfitrión quiere dividir a los invitados en 2 equipos para juegos de fiesta, con exactamente el mismo número de invitados en cada equipo. Quiere poder saber qué invitado está en qué equipo cuando los saluda a medida que llegan, y lo más fácilmente posible, sin tener que tomarse el tiempo de buscar el nombre de cada invitado en una lista. Como eres un buen científico de la computación, tienes una idea: dale una sola cadena, y todo lo que tiene que hacer es determinar si el nombre del invitado es alfabéticamente menor o mayor que esa cadena. Dados los nombres únicos de n invitados a la fiesta (n es par), encuentra la cadena más corta posible S tal que exactamente la mitad de los nombres sean menores o iguales a S, y exactamente la mitad sean mayores que S. Si hay más de una cadena de la longitud más corta, genera la que viene primero alfabéticamente. Entrada Habrá múltiples casos de prueba en la entrada. Cada caso de prueba comenzará con un entero par n (2 ≤ n ≤ 1, 000) en su propia línea. En las siguientes n líneas habrá nombres, uno por línea. Cada nombre será una sola palabra que constará solo de letras mayúsculas y tendrá al menos una letra y no más de 30 letras. Todos los nombres en un caso de prueba serán únicos. La entrada terminará con un 0 en su propia línea. La entrada debe leerse desde la entrada estándar. Salida Para cada caso, muestre la primera cadena alfabéticamente de todas las cadenas más cortas posibles que su anfitrión podría usar para separar a sus invitados. Envíe esta cadena usando todas las letras mayúsculas. No envíe espacios. No coloque una línea en blanco entre las salidas. La salida debe escribirse en la salida estándar. Entrada de muestra 4 FRED SAM JOE MARGARET 2 FRED FREDDIE 2 JOSEPHINE JERRY 0 Salida de muestra K FRED JF

Liga Colegial Colombiana de Programación - CCPL 2013 10 G - Nonograma Inverso Nombre del archivo fuente: nonogram.c, nonogram.cpp o nonogram.java Un nonograma es un rompecabezas de lápiz que se juega en una cuadrícula. La cuadrícula está inicialmente en blanco. Hay números en los lados y en la parte superior de la cuadrícula, que indican cómo se deben llenar los cuadrados de la cuadrícula. Los números miden cuántas líneas continuas de cuadrados llenos hay en cualquier fila o columna dada. Por ejemplo, una pista de &#39;&#39;4 8 3&#39;&#39; significaría que hay conjuntos de cuatro, ocho y tres cuadrados llenos, en ese orden, con al menos un cuadrado en blanco entre grupos sucesivos. Aquí hay un pequeño ejemplo, con su solución. 1 1 5 1 1 1 3 1 1 1 1 1 1 5 1 1 1 · · · · 3 · · 1 1 1 · · 1 · · · · 1 · · · · Vas a trabajar al revés. Dada una solución de nonograma, genere los números que deberían estar en los costados y en la parte superior de la cuadrícula. Entrada Habrá varios casos de prueba en la entrada. Cada caso de prueba comenzará con un entero n (2 ≤ n ≤ 100) que indica el tamaño de la cuadrícula. Cada una de las siguientes n líneas tendrá exactamente n caracteres, que consisten en &#39;.&#39; para un cuadrado en blanco o &#39;X&#39; para un cuadrado que se ha completado. La entrada terminará con una línea con un solo 0. La entrada debe leerse desde la entrada estándar. Salida Para cada caso de prueba, imprima 2n líneas de salida. Las primeras n líneas representan los números de las filas, de arriba a abajo. Las siguientes n líneas representan los números en la parte superior, de izquierda a derecha. Si alguna fila o columna no tiene cuadrados completados, imprima un 0. Coloque un solo espacio entre los números en la misma línea. No imprima ninguna línea con espacios en blanco al principio o al final. No imprima líneas en blanco entre ninguna línea de salida. La salida debe escribirse en la salida estándar.

Liga Colegial Colombiana de Programación - CCPL 2013 11 Entrada de muestra 3 XXX .XX .X. 3 XX ..X X.. 5 ..X.. .XXX. XXX ..X.. ..X.. 0 Salida de muestra 3 2 1 1 3 2 1 1 1 1 1 0 2 1 3 1 1 1 1 1 1 1 5 1 1

Liga Colegial Colombiana de Programación - CCPL 2013 12 H - Tsunami Nombre del archivo fuente: tsunami.c, tsunami.cpp o tsunami.java El país de Cartesia puede describirse simplemente mediante un plano cartesiano. El eje x es una línea costera. El semiplano y positivo es la tierra y el semiplano y negativo es el océano. Varias ciudades grandes salpican el continente. Sus posiciones pueden describirse mediante coordenadas (x, y), con y &gt; 0. Desafortunadamente, a veces hay tsunamis en el océano cerca de Cartesia. Cuando esto sucede, todo el país puede inundarse. Las aguas comenzarán en y = 0 y avanzarán uniformemente en la dirección y positiva. Cartesia está tratando de desarrollar un sistema de alerta de tsunami. El sistema de alerta consta de dos componentes: un solo centro meteorológico que puede detectar un tsunami a millas de distancia y conexiones cableadas que pueden llevar la alerta de ciudad a ciudad en línea recta (¡¡¡Sin comunicación inalámbrica!!!). A pesar de la falta de comunicaciones inalámbricas, las conexiones cableadas pueden llevar la alerta prácticamente instantáneamente. Una ciudad se considera segura si tiene el centro meteorológico o si tiene una conexión directa por cable a otra ciudad segura (es decir, si tiene una ruta de cable de varios saltos al único centro meteorológico). ¡Desafortunadamente, un simple problema de ingeniería se vuelve más complicado por la política! Si una ciudad A recibe la advertencia de la ciudad B, y la ciudad B está más lejos de la costa que la ciudad A, ¡entonces los líderes de la ciudad A se quejarán! &#39;&#39;&#39;¡Estamos más cerca del océano que la ciudad B, por lo que la advertencia debería haber pasado por nosotros!&#39; Con un suspiro, acepta encontrar una solución donde ninguna ciudad reciba la advertencia de una ciudad que esté más lejos de la costa. (Esto significa que el centro meteorológico debe estar en una ciudad que esté más cerca de la costa). Dada una descripción de Cartesia, encuentre la menor cantidad de cable necesaria para construir un sistema de alerta de tsunami donde cada ciudad sea segura y ninguna ciudad reciba la advertencia de otra ciudad que esté más lejos de la costa. Entrada Habrá varios casos de prueba en la entrada. Cada caso de prueba comenzará con un entero n (1 ≤ n ≤ 1, 000) en su propia línea, indicando el número de ciudades. En cada una de las siguientes n líneas habrá un par de enteros x e y (−1, 000 ≤ x ≤ 1, 000, 0 &lt; y ≤ 1, 000), cada uno de los cuales es la ubicación (x, y) de una ciudad. Estos enteros estarán separados por un solo espacio. Dentro de un caso de prueba, todos los pares (x, y) serán únicos. La entrada terminará con una línea que contiene un solo 0. La entrada debe leerse desde la entrada estándar. Salida Para cada caso de prueba, muestre un solo número real en su propia línea, que es la cantidad mínima de cable que se debe usar para construir el sistema de alerta de tsunamis. muestre este número con exactamente dos decimales. No muestre espacios adicionales y no separe las respuestas con líneas en blanco. La salida debe escribirse en la salida estándar.

Liga Colegial Colombiana de Programación - CCPL 2013 13 Muestra de entrada 3 100 10 300 10 200 110 4 100 10 300 10 200 110 200 60 0 Muestra de salida 341,42 361,80

Liga Colegial Colombiana de Programación - CCPL 2013 14 I - Números infelices Nombre del archivo fuente: unhappy.c, unhappy.cpp o unhappy.java ¡Los números también tienen sentimientos! Para cualquier entero positivo, tome la suma de los cuadrados de cada uno de sus dígitos y súmelos. Tome el resultado y vuelva a hacerlo. Un número es feliz si, después de repetir este proceso un número finito de veces, la suma es 1. Algunos números felices requieren más iteraciones de este proceso para llegar a 1 que otros, y eso se denominaría su distancia de la felicidad. La distancia de 1 a la felicidad es 0. La distancia de 23 a la felicidad es 3, ya que 22 + 32 = 13, 12 + 32 = 10 y 12 + 02 = 1. Los números son infelices si están infinitamente lejos de la felicidad porque se quedan atrapados en un bucle. Dados los extremos inferior y superior de un rango de números enteros, determine cuántos números infelices hay en ese rango (inclusive). Entrada Habrá varios casos de prueba en la entrada. Cada caso de prueba constará de dos números enteros positivos, lo y hi (0 &lt; lo ≤ hi ≤ 1018) en una sola línea, con un solo espacio entre ellos. La entrada terminará con dos 0. La entrada debe leerse desde la entrada estándar. Salida Para cada caso de prueba, muestre un solo entero en su propia línea, indicando el recuento de números infelices entre lo y hi (inclusive). No muestre espacios adicionales y no separe las respuestas con líneas en blanco. La salida debe escribirse en la salida estándar. Entrada de muestra 1 10 1 100 0 0 Salida de muestra 7 80

Liga Colegial Colombiana de Programación - CCPL 2013 15 J - Muros Nombre del archivo fuente: walls.c, walls.cpp o walls.java Hay varias estaciones de investigación en una zona desértica sin rasgos distintivos, que se puede modelar como un plano cartesiano. Cada estación está ubicada en algún punto (x, y) donde x e y son números enteros pares. Por razones de seguridad, se deben construir muros lo suficientemente largos y altos para separar las estaciones de modo que ninguna estación sea visible desde ninguna de las otras estaciones. Un muro solo se puede construir a lo largo de una línea Norte-Sur o Este-Oeste. Se puede construir un muro vertical en una coordenada x impar, y un muro horizontal en una coordenada y impar. Dado que las estaciones están ubicadas en coordenadas de valor par, y los muros se construyen a lo largo de coordenadas de valor impar, ningún muro puede tocar una estación. Los muros siempre son lo suficientemente largos para separar completamente las estaciones de un lado de las estaciones del otro lado. Dada una lista de estaciones, debe determinar el número mínimo de muros que se deben construir. Entrada Habrá varios casos de prueba en la entrada. Cada caso de prueba comenzará con un entero n (2 ≤ n ≤ 100), que es el número de estaciones. Las siguientes n líneas contendrán cada una dos enteros x e y (0 ≤ x, y ≤ 36), separados por un solo espacio, indicando la ubicación (x, y) de una estación. Se garantiza que los valores x e y sean pares. Dentro de un caso de prueba, todas las ubicaciones (x, y) serán únicas. El último caso de prueba será seguido por una línea con un solo 0. La entrada debe leerse desde la entrada estándar. Salida Para cada caso de prueba, genere un solo entero, indicando el menor número de paredes que pueden evitar que las n estaciones dadas se vean entre sí. Es decir, un segmento de línea recta que una dos estaciones cualesquiera debe ser intersecado por al menos una pared. No genere espacios adicionales y no separe las respuestas con líneas en blanco. La salida debe escribirse en la salida estándar. Entrada de muestra 4 12 12 4 8 8 6 2 4 4 0 0 4 4 10 8 14 6 0 Salida de muestra 2 3

